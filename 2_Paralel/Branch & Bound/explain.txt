Seguindo a Metodologia de Foster para o desenvolvimento de aplicações paralelas, aplicamos os quatro passos fundamentais: Particionamento, Comunicação, Aglomeração e Mapeamento. A seguir, descrevemos a proposta de particionamento baseada no algoritmo Branch and Bound (B&B) implementado na versão paralela do código fornecido.

Algoritmo Utilizado
O algoritmo escolhido é o mesmo da versão sequencial: Branch and Bound (B&B), um método exato que explora recursivamente diferentes combinações de ordens de operações para encontrar o menor makespan possível, com poda de ramos inviáveis.

1. Particionamento
Objetivo: Dividir o problema em tarefas menores independentes que possam ser executadas em paralelo.

Estratégia aplicada:
O problema original (conjunto de todos os jobs) é replicado localmente para cada thread.
Cada thread realiza uma exploração independente do espaço de soluções usando o mesmo algoritmo de branch and bound.
Como o espaço de soluções é o mesmo, a esperança é que diferentes threads explorem diferentes caminhos da árvore de busca devido à variação nos tempos de execução ou ordem de chamadas.

Justificação:
Como o algoritmo B&B é fortemente dependente da ordem de exploração da árvore de soluções, múltiplas instâncias paralelas aumentam a probabilidade de encontrar rapidamente soluções promissoras.
Cada thread usa cópias locais das variáveis de estado (jobs, job_ready, machine_available), evitando interferência direta e eliminando a necessidade de sincronização durante a exploração.

2. Grupos de Instruções por Thread
Cada thread executa as seguintes etapas:
Criação de cópias locais dos dados globais:
Job local_jobs[MAX_JOBS]
int local_job_ready[MAX_JOBS]
int local_machine_available[MAX_MACHINES]
Inicialização dos estados locais (next_op = 0, etc.).
Chamada recursiva de branch() a partir do estado inicial.
Comparação do makespan resultante com o melhor global.
Uso de mutex (pthread_mutex_lock) para proteger a atualização do melhor resultado global (best_makespan e best_schedule).

3. Padrão de Comunicação
Tipo de comunicação: Comunicação indireta e limitada, apenas via memória partilhada e sincronizada por mutex.

Características:
Não há comunicação contínua entre threads.
A única interação ocorre quando uma thread encontra uma solução melhor e tenta atualizá-la globalmente.
Este acesso é protegido por mutex (best_mutex) para garantir exclusão mútua e evitar condições de corrida.

Vantagens:
Redução de sobrecarga de comunicação.
Threads são majoritariamente independentes, explorando o espaço de busca sem bloqueios frequentes.

